// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  id              String            @id @default(uuid())
  name            String
  email           String
  password        String
  Profiles        Profiles?
  Issues          Issues[]
  Discussion      Discussion[]
  Images          Images[]
  Role            Roles?            @relation(fields: [rolesId], references: [id])
  rolesId         String?
  AuthToken       AuthToken[]
  IssueHistory    IssueHistories[]
  Departement     Departements?     @relation(fields: [departementsId], references: [id])
  departementsId  String?
  Notif           Notif[]
  Todos           Todos[]
  Jabatan         Jabatan[]
  UserDepartement UserDepartement[]
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @updatedAt
  UserJabatan     UserJabatan[]
}

model UserJabatan {
  id         String    @id @default(uuid())
  Users      Users?    @relation(fields: [usersId], references: [id])
  usersId    String?
  Jabatan    Jabatan?  @relation(fields: [jabatansId], references: [id])
  jabatansId String?
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
}

model UserDepartement {
  id          String         @id @default(uuid())
  User        Users[]
  Departement Departements[]
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @updatedAt
}

model Profiles {
  id          String     @id @default(uuid())
  first_name  String
  last_name   String
  bith_day    String
  address     String
  phone       String
  User        Users?     @relation(fields: [usersId], references: [id])
  usersId     String?    @unique
  Position    Positions? @relation(fields: [positionsId], references: [id])
  positionsId String?    @unique
  Role        Roles?     @relation(fields: [rolesId], references: [id])
  rolesId     String?
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Positions {
  id             String        @id @default(uuid())
  name           String
  Profiles       Profiles?
  Departement    Departements? @relation(fields: [departementsId], references: [id])
  departementsId String?
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
}

model Departements {
  id                 String               @id @default(uuid())
  name               String
  Positions          Positions[]
  Issues             Issues[]
  Users              Users[]
  Todos              Todos[]
  UserDepartement    UserDepartement[]
  createdAt          DateTime?            @default(now())
  updatedAt          DateTime?            @updatedAt
  JabatanDepartement JabatanDepartement[]
}

model Roles {
  id          String     @id @default(uuid())
  name        String
  description String?
  Profiles    Profiles[]
  Users       Users[]
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Issues {
  id                String           @id @default(uuid())
  idx               Int              @unique @default(autoincrement())
  name              String
  des               String           @db.Text
  IssueType         IssueTypes?      @relation(fields: [issueTypesId], references: [id])
  issueTypesId      String?
  IssuesStatus      IssueStatuses?   @relation(fields: [issueStatusesId], references: [id])
  issueStatusesId   String?
  Client            Clients?         @relation(fields: [clientsId], references: [id])
  clientsId         String?
  Product           Products?        @relation(fields: [productsId], references: [id])
  productsId        String?
  CreatedBy         Users?           @relation(fields: [usersId], references: [id])
  createdAt         DateTime?        @default(now())
  updatedAt         DateTime?        @default(now())
  usersId           String?
  IssuePriority     IssuePriorities? @relation(fields: [issuePrioritiesId], references: [id])
  issuePrioritiesId String?
  Departement       Departements?    @relation(fields: [departementsId], references: [id])
  departementsId    String?
  Discussion        Discussion[]
  Images            Images[]
  IssueHistory      IssueHistories[]
  dateSubmit        DateTime?
  Notif             Notif[]
}

model IssueHistories {
  id              String         @id @default(uuid())
  Issue           Issues?        @relation(fields: [issuesId], references: [id])
  issuesId        String?
  note            String?
  User            Users?         @relation(fields: [usersId], references: [id])
  usersId         String?
  IssueStatus     IssueStatuses? @relation(fields: [issueStatusesId], references: [id])
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
  issueStatusesId String?
}

model Images {
  id         String       @id @default(uuid())
  name       String
  url        String?
  Issue      Issues?      @relation(fields: [issuesId], references: [id])
  issuesId   String?
  Users      Users?       @relation(fields: [usersId], references: [id])
  usersId    String?
  Discussion Discussion[]
  createdAt  DateTime?    @default(now())
  updatedAt  DateTime?    @updatedAt
}

model Discussion {
  id        String    @id @default(uuid())
  User      Users?    @relation(fields: [usersId], references: [id])
  Issue     Issues?   @relation(fields: [issuesId], references: [id])
  content   String?
  Image     Images?   @relation(fields: [imagesId], references: [id])
  issuesId  String?
  usersId   String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  imagesId  String?
}

model IssueTypes {
  id        String    @id @default(uuid())
  name      String
  Issues    Issues[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model IssueStatuses {
  id           String           @id @default(uuid())
  name         String
  Issues       Issues[]
  IssueHistory IssueHistories[]
  createdAt    DateTime?        @default(now())
  updatedAt    DateTime?        @updatedAt
}

model Clients {
  id            String           @id @default(uuid())
  name          String
  email         String?
  phone         String?
  address       String?
  Issues        Issues[]
  ContacPersons ContactPersons[]
  createdAt     DateTime?        @default(now())
  updatedAt     DateTime?        @updatedAt
}

model ContactPersons {
  id        String    @id @default(uuid())
  name      String
  email     String?
  phone     String?
  address   String?
  Client    Clients?  @relation(fields: [clientsId], references: [id])
  clientsId String?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Products {
  id        String    @id @default(uuid())
  name      String
  Issues    Issues[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model IssuePriorities {
  id        String    @id @default(uuid())
  name      String
  value     Int
  des       String?
  Issues    Issues[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

// model IssueAssigneds {
//   id        String    @id @default(uuid())
//   note      String
//   Issues    Issues?   @relation(fields: [issuesId], references: [id])
//   issuesId  String?
//   AssignBy  Users?    @relation(fields: [usersId], references: [id])
//   usersId   String?
//   createdAt DateTime? @default(now())
//   updatedAt DateTime? @default(now())
// }

model AuthToken {
  id        String   @id @default(uuid())
  User      Users    @relation(fields: [usersId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime @default(now())
  usersId   String
}

model Notif {
  id        String   @id @default(uuid())
  User      Users?   @relation(fields: [usersId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  usersId   String
  Issue     Issues?  @relation(fields: [issuesId], references: [id])
  issuesId  String?
  title     String?
  content   String?
  jenis     String?  @default("msg")
}

model Todos {
  id             String        @id @default(uuid())
  User           Users?        @relation(fields: [usersId], references: [id])
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  usersId        String
  title          String?
  content        String?
  status         String?       @default("open")
  Departement    Departements? @relation(fields: [departementsId], references: [id])
  departementsId String?
}

model Jabatan {
  id        String    @id @default(uuid())
  name      String
  Users     Users[]
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  JabatanDepartement JabatanDepartement[]
  UserJabatan        UserJabatan[]
}

model JabatanDepartement {
  id             String        @id @default(uuid())
  Jabatan        Jabatan?      @relation(fields: [jabatansId], references: [id])
  jabatansId     String?
  Departement    Departements? @relation(fields: [departementsId], references: [id])
  departementsId String?
  isSelected     Boolean?      @default(false)
  createdAt      DateTime?     @default(now())
  updatedAt      DateTime?     @updatedAt
}
